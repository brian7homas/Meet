{"version":3,"sources":["pieChart.jsx","EventGenre.js"],"names":["genres","COLORS","RADIAN","Math","PI","renderCustomizedLabel","payload","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","CustomTooltip","console","log","city","className","Graph","events","data","map","genre","value","filter","event","summary","split","includes","length","name","PieChart","width","height","Pie","labelLine","label","dataKey","nameKey","Tooltip","content","entry","Cell","EventGenre","ResponsiveContainer","fallback","style"],"mappings":"mKAoBMA,EAAS,CAAC,QAAS,aAAc,OAAQ,SAAU,aAEnDC,EAAS,CAAC,UAAW,UAAW,UAAW,WAC3CC,EAASC,KAAKC,GAAK,IACnBC,EAAwB,SAAC,GASzB,EARJC,QAQK,IAPLC,EAOI,EAPJA,GACAC,EAMI,EANJA,GACAC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QAGMC,GADF,EADJC,MAEeJ,EAA4C,IAA7BC,EAAcD,IACtCK,EAAIR,EAAKM,EAASV,KAAKa,KAAKP,EAAWP,GACvCe,EAAIT,EAAKK,EAASV,KAAKe,KAAKT,EAAWP,GAE7C,OACE,mCAEE,sBACEa,EAAGA,EACHE,EAAGA,EACHE,KAAK,QACLC,WAAYL,EAAIR,EAAK,QAAU,MAC/Bc,iBAAiB,MALnB,oBAOiB,IAAVT,GAAeU,QAAQ,GAP9B,UAYAC,EAAgB,SAAC,EAAaT,GAAW,IAAtBR,EAAqB,EAArBA,QACvB,OAAIA,GAAWQ,GACbU,QAAQC,IAAInB,EAAQoB,KAAMZ,GAExB,sBAAKa,UAAU,iBAAf,UACE,4BAAIrB,EAAQoB,OACZ,4BAAIZ,QAcH,MAoDMc,MA5Cf,YAA4B,IAAXC,EAAU,EAAVA,OAETC,EAAO9B,EAAO+B,KAAI,SAAAC,GAEtB,IAAMC,EAAQJ,EAAOK,QAAO,SAAAC,GAI1B,QAFgBA,EAAMC,QAAQC,MAAM,KAEzBC,SAASN,MAKnBO,OACH,MAAO,CAACC,KAAMR,EAAOC,YAIvB,OAFAT,QAAQC,IAAIK,GAGV,cAACW,EAAA,EAAD,CAAUC,MAAO,KAAMC,OAAQ,IAA/B,SACE,eAACC,EAAA,EAAD,CAIEd,KAAMA,EACNvB,GAAI,IACJC,GAAI,IACJqC,WAAW,EACXC,MAAOzC,EACPM,YAAa,IACbD,YAAa,GACbS,KAAK,UACL4B,QAAQ,QACRC,QAAQ,QAbV,UAeE,cAACC,EAAA,EAAD,CAASC,QAAS,cAAC,EAAD,MAEjBpB,EAAKC,KAAI,SAACoB,EAAOrC,GAAR,OACR,cAACsC,EAAA,EAAD,CAA4BjC,KAAMlB,EAAOa,EAAQb,EAAOsC,SAAxD,eAAmBzB,aCxGduC,UAZf,YAA+B,IAAVxB,EAAS,EAATA,OACnB,OACE,mCACA,cAACyB,EAAA,EAAD,UACE,cAAC,WAAD,CAAUC,SAAU,oCAApB,SACE,cAAC,EAAD,CAAaC,MAAO,CAAC,OAAU,UAAW3B,OAAQA","file":"static/js/8.60ea6593.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { PieChart, Pie, Cell, Tooltip } from \"recharts\";\n\nconst testData = [\n  { city: \"Toronto\", number: 15 },\n  { city: \"New York\", number: 23 },\n  { city: \"Tokyo\", number: 15 },\n  { city: \"Mumbai\", number: 22 },\n  { city: \"London\", number: 22 },\n  { city: \"Nairobi\", number: 15 },\n  { city: \"Santiago\", number: 22 },\n  { city: \"California\", number: 15 },\n  { city: \"Bangkok\", number: 15 },\n  { city: \"Berlin\", number: 22 },\n  { city: \"Cape Town\", number: 22 },\n  { city: \"Amsterdam\", number: 14 },\n  { city: \"Dubai - United Arab Emirates\", number: 14 },\n  { city: \"Sydney NSW\", number: 7 },\n  { city: \"Moscow\", number: 7 }\n]\nconst genres = ['React', 'JavaScript', 'Node', 'jQuery', 'AngularJS']\n\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  payload,\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <>\n\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"top\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\nconst CustomTooltip = ({ payload }, index) => {\n  if (payload && index) {\n    console.log(payload.city, index)\n    return (\n      <div className=\"custom-tooltip\">\n        <p>{payload.city}</p>\n        <p>{index}</p>\n      </div>\n    )\n  }\n  // if (active && payload && payload.length) {\n  //   return (\n  //     <div className=\"custom-tooltip\">\n  //       <p className=\"label\">{`${label} : ${payload[0].value}`}</p>\n  //       <p className=\"intro\">{data}</p>\n  //       <p className=\"desc\">Anything you want can be displayed here.</p>\n  //     </div>\n  //   );\n  // }\n\n  return null;\n};\n\nconst text = (_, index) => {\n  console.log(index)\n  return index\n}\n\nfunction Graph({ events }) {\n  // map through genres\n  const data = genres.map(genre => {\n    // map through event props\n    const value = events.filter(event => {\n      // split each summary\n      const summary = event.summary.split(' ')\n      // if summary matches anything inside each genre string return the event\n      if(summary.includes(genre)){\n        return true\n      }\n      return false\n      // .length specifiy the number of events\n    }).length\n    return {name: genre, value}\n  })\n  console.log(data)\n\n  return (\n    <PieChart width={1900} height={400} >\n      <Pie\n        // activeIndex={1}\n        // activeShape={text}\n        // onMouseEnter={CustomTooltip}\n        data={data}\n        cx={400}\n        cy={200}\n        labelLine={false}\n        label={renderCustomizedLabel}\n        outerRadius={180}\n        innerRadius={80}\n        fill=\"#8884d8\"\n        dataKey=\"value\"\n        nameKey='genre'\n      >\n        <Tooltip content={<CustomTooltip />} />\n\n        {data.map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n    </PieChart>\n  );\n}\nexport default Graph","import React, { useEffect, Suspense } from \"react\"\nimport { PieChart, Pie, Sector, Cell, ScatterChart, Scatter, LabelList, Line, ZAxis, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport CircleGraph from './pieChart'\nfunction EventGenre({events}) {\n  return (\n    <>\n    <ResponsiveContainer>\n      <Suspense fallback={<p>wtf</p>}>\n        <CircleGraph style={{'margin': '0 auto'}} events={events}/>\n      </Suspense>\n    </ResponsiveContainer>\n    </>\n  )\n}\n\nexport default EventGenre"],"sourceRoot":""}