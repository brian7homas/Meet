{"version":3,"sources":["CitySearch.js"],"names":["CitySearch","handleInputChanged","event","suggestions","value","target","parseInt","setState","query","error","input","infoText","props","locations","filter","location","toUpperCase","indexOf","length","handleItemClicked","suggestion","showSuggestions","updateEvents","state","this","className","modifier","text","type","onChange","onFocus","style","visibility","map","onClick","Component"],"mappings":"0JAEMA,E,kDACJ,aAAe,IAAD,8BACZ,gBAmBFC,mBAAqB,SAACC,GACpB,IAAIC,EACAC,EAAQF,EAAMG,OAAOD,MAEzB,OAAGE,SAASJ,EAAMG,OAAOD,OAChB,EAAKG,SAAS,CACnBC,MAAOJ,EACPK,MAAO,CAAEC,MAAO,yBAIP,KAAVN,EACM,EAAKG,SAAS,CACnBC,MAAO,GACPC,MAAO,CAAEC,MAAO,IAChBC,SAAU,GACVR,YAAY,KAGoB,kBAA1B,EAAKS,MAAMC,WAKO,KAJ1BV,EAAc,EAAKS,MAAMC,UAAUC,QAAO,SAACC,GACzC,OAAOA,EAASC,cAAcC,QAAQb,EAAMY,gBAAkB,MAGjDE,OACN,EAAKX,SAAS,CACnBC,MAAOJ,EACPO,SAAU,yEACVR,YAAa,UAInB,EAAKI,SAAS,CACZI,SAAU,GACVH,MAAOJ,EACPD,iBAvDU,EA4DdgB,kBAAoB,SAACC,GAOnB,OANA,EAAKb,SAAS,CACZC,MAAOY,EACPC,iBAAiB,EACjBV,SAAS,GACTF,MAAO,CAAEC,MAAO,MAEX,EAAKE,MAAMU,aAAaF,IAjE/B,EAAKG,MAAQ,CACXf,MAAO,oBACPL,YAAa,GACbkB,iBAAiB,EACjBR,UAAW,GACXF,SAAS,GACTF,MAAO,CACLC,MAAO,KATC,E,qDAcd,WACEc,KAAKjB,SAAS,CACZM,UAAWW,KAAKZ,MAAMC,c,oBAsD1B,WAAU,IAAD,OACP,OACE,sBAAKY,UAAU,aAAf,UAEE,uBAAOA,UAAU,oBAAjB,gCACA,cAAC,IAAD,CAAWC,SAAS,kBAAkBC,KAAMH,KAAKD,MAAMZ,WACvD,cAAC,IAAD,CAAYe,SAAS,aAAaC,KAAMH,KAAKD,MAAMd,MAAMC,QACzD,uBACEe,UAAU,OACVG,KAAK,OAELxB,MAAOoB,KAAKD,MAAMf,MAClBqB,SAAUL,KAAKvB,mBACf6B,QAAS,WAAQ,EAAKvB,SAAS,CAAEC,MAAO,GAAIa,iBAAiB,OAE/D,qBAAII,UAAU,cAAcM,MAAOP,KAAKD,MAAMF,gBAAkB,GAAK,CAAEW,WAAY,UAAnF,UAEIR,KAAKD,MAAMpB,YAAY8B,KAAI,SAAAb,GACzB,OAAQ,oBAEJc,QAAS,WACP,EAAKf,kBAAkBC,IAHrB,SAKHA,GAJIA,MAQb,wBAAQK,UAAU,kBAA4BS,QAAS,kBAAM,EAAKf,kBAAkB,QAApF,SACE,iDADsC,iB,GAlGzBgB,aA2GVnC","file":"static/js/4.bf7fd589.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { InfoAlert, ErrorAlert } from './Alert'\nclass CitySearch extends Component {\n  constructor() {\n    super()\n    this.state = {\n      query: 'Enter a city name',\n      suggestions: [],\n      showSuggestions: false,\n      locations: [],\n      infoText:'',\n      error: {\n        input: ''\n      }\n    }\n  }\n\n  componentDidMount(){\n    this.setState({\n      locations: this.props.locations\n    })\n  }\n\n  handleInputChanged = (event) => {\n    let suggestions\n    let value = event.target.value\n    // filter the state of suggestions\n    if(parseInt(event.target.value)) {\n      return this.setState({\n        query: value,\n        error: { input: 'Only Letters Please'}\n      })\n    }\n    \n    if(value === ''){\n      return this.setState({\n        query: '',\n        error: { input: \"\"},\n        infoText: '',\n        suggestions:[]\n      })\n    }\n    if(typeof(this.props.locations) === 'object'){\n      suggestions = this.props.locations.filter((location) => {\n        return location.toUpperCase().indexOf(value.toUpperCase()) > -1\n      })\n      // if a users begins to type in a city that returns no suggestions\n      if(suggestions.length === 0){\n        return this.setState({\n          query: value,\n          infoText: 'We can not find the city you are looking for. Please try another city.',\n          suggestions: []\n        })\n      }\n    }\n    this.setState({\n      infoText: '',\n      query: value,\n      suggestions\n    })\n  }\n\n  // Will handle changing the state of query when clicked\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion,\n      showSuggestions: false,\n      infoText:'',\n      error: { input: ''}\n    })\n    return this.props.updateEvents(suggestion)\n  }\n\n  render() {\n    return (\n      <div className='CitySearch'>\n        \n        <label className='CitySearch__label'>Search for a city </label>\n        <InfoAlert modifier='citysearch-info' text={this.state.infoText} />\n        <ErrorAlert modifier='citysearch' text={this.state.error.input} />\n        <input\n          className='city'\n          type='text'\n          // pass the value of state into input\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n          onFocus={() => { this.setState({ query: '', showSuggestions: true })}}\n        />\n        <ul className=\"suggestions\" style={this.state.showSuggestions ? {} : { visibility: 'hidden' }}>\n          {\n            this.state.suggestions.map(suggestion => {\n              return (<li \n                  key={suggestion}\n                  onClick={() => {\n                    this.handleItemClicked(suggestion)\n                    }}>\n                  {suggestion}\n                </li>)\n            })\n          }\n          <button className='CitySearch__btn' key='all' onClick={() => this.handleItemClicked(\"all\")}>\n            <b>See all citites</b>\n          </button>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default CitySearch"],"sourceRoot":""}